var uuidUtils = require('node-uuid');
exports.process = function(message){
	var m = message;
	var timeStamp;
	var messageType;
	var content;
	var pMsg;
	var dir;
	var entry;
	m = removePrefixValue(m);
	timeStamp = extractTimeStamp(m);
	messageType = extractMessageType(m);
	content = extractContent(m);
	dir = extractDir(m);

	if(content){
		pMsg = cleanContent(content);
		//console.log('Timestamp = '+timeStamp + ' Type = '+messageType +" Dir = "+dir+
		//' HEADER = '+(pMsg.isHeader)+ ' CONTENT = '+(pMsg.isContent));
		//console.log('Header: '+pMsg.isHeader+'Content = '+pMsg.content);		
	}
	return new Message({
		timeStamp:timeStamp,
		messageType:messageType,
		dir:dir,
		content:pMsg
	});
};

exports.Window = Window;

var removePrefixValue = function(message){
	var shevronLeft = message.indexOf('<',0);
	var shevronRight = message.indexOf('>',0);
	return message.substring(shevronRight+1);
};

var extractTimeStamp =  function(message){
	var timeStampStart = message.indexOf('[',0);
	var timeStampEnd = message.indexOf(']',0);
	return message.substring(timeStampStart+1,timeStampEnd);
};

var extractMessageType = function(message) {
	return message.split(' ')[2];
};

var extractContent = function(message){
    //Check for a wire log
    var wireToken = message.indexOf('<<',0);

    if(wireToken<0){
    	wireToken = message.indexOf(">>",0);
    }
    if(wireToken<0){
    	return null;
    }
    return message.substring(wireToken+3);
};

var extractDir =  function(message){
    var wireToken = message.indexOf('<<',0);
    var  dir = "<<";
    if(wireToken<0){
    	wireToken = message.indexOf(">>",0);
    	dir = ">>";
    }
    if(wireToken<0){
    	return null;
    }
    return dir;
};

var cleanContent = function(content) {
	var WIRE_CONTENT = '{httpclient.wire.content}';
	var WIRE_HEADER = '{httpclient.wire.header}';
	var WIRE = '{org.apache.synapse.transport.http.wire}';
	content = content.replace('[\\r]','');
	content = content.replace('[\\n]','');
	content = content.replace(WIRE,'');
	content = content.trim();
	var isHeader = content.indexOf(WIRE_CONTENT);
	//console.log('header '+isHeader);
	if(isHeader > 0){
		content = content.replace(WIRE_CONTENT,'');
	}
	var isContent = content.indexOf(WIRE_HEADER);
	if(isContent > 0 ){
		content = content.replace(WIRE_HEADER,'');
		content = content.trim();
	//	content = content.substring(1,content.length-1);
	}
	content = content.substring(1,content.length-1);
	return {
		isHeader:(isHeader>0),
		isContent:(isContent > 0 ),
		content:content
	};
};

function Window(){
	this.messages = [];
}

Window.prototype.put = function(message) {
	this.messages.push(message);
};

Window.prototype.sort = function(){

};

Window.prototype.count = function(){
	return this.messages.length;
};

Window.prototype.process = function(){
	var requests = [];
	var request = new ESBRequest();
	var msg;
	var previous = '>>';

	for(var index = 0; index < this.messages.length; index++){
		msg = this.messages[index];
		if(msg.getDirection() != previous) {
			//console.log('****** NEW REQUEST ******');
			//console.log('Content: '+msg.content.content+'|');
			request.compile();
			requests.push(request);
			request =  new ESBRequest();
			request.put(msg);
			previous = msg.getDirection();
		} else {
			//console.log('*** ADD NEW MESSAGE ***');
			//console.log('Content: '+msg.content.content.trim()+'| size:'+msg.content.content.trim().length);
			request.put(msg);
		}
		//console.log(msg.content.content);
	}
	request.compile();
	if(request.messages.length>0){
		requests.push(request);		
	}
	this.messages = [];
	return requests;
};

function Message(opts){
	this.timeStamp = opts.timeStamp;
	this.messageType = opts.messageType;
	this.dir = opts.dir;
	this.content = opts.content;
}


Message.prototype.getDirection = function(){
	return this.dir;
};

function ESBRequest(){
	this.id = uuidUtils.v1();
	this.messages = [];
	this.str = '';
}

ESBRequest.prototype.put = function(msg){
	this.messages.push(msg);
};

ESBRequest.prototype.compile= function(){
	var str = '';
	var content = '';
	for(var index = 0; index < this.messages.length; index ++){
		content = this.messages[index].content ?  this.messages[index].content.content : '';
		str+=content;//this.messages[index].content.content;
	}
	this.str = str;
};